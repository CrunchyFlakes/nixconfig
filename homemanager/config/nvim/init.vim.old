" Plugins {{{
call plug#begin('~/.local/share/nvim/site')

" list of plugins
Plug 'karb94/neoscroll.nvim'
Plug 'ggandor/leap.nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
Plug 'junegunn/vim-easy-align'
"Plug 'tpope/vim-abolish'
"Plug 'jalvesaq/Nvim-R', {'branch': 'stable'}
Plug 'kkoomen/vim-doge', {'do': { -> doge#install() } }
"Plug 'morhetz/gruvbox' " this is the official one
Plug 'sainnhe/gruvbox-material'
"Plug 'vim-scripts/Tabmerge'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
"Plug 'itchyny/vim-gitbranch'
Plug 'tpope/vim-surround'
"Plug 'tpope/vim-commentary'
"Plug 'tpope/vim-repeat'
"Plug 'dense-analysis/ale'
"Plug 'maximbaz/lightline-ale'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
"Plug 'deoplete-plugins/deoplete-clang'
"Plug 'deoplete-plugins/deoplete-jedi'
"Plug 'Shougo/echodoc.vim'
"Plug 'Shougo/neco-syntax'
"Plug 'tpope/vim-endwise'
"Plug 'raghur/vim-ghost', {'do': ':GhostInstall'} " edit textareas in browsers (useful for remote pair programming)
Plug 'subnut/nvim-ghost.nvim', {'do': ':call nvim_ghost#installer#install()'}
Plug 'luochen1990/rainbow'
Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'AndrewRadev/dsf.vim'
"Plug 'JuliaEditorSupport/julia-vim'
"Plug 'JamshedVesuna/vim-markdown-preview'
"Plug 'plasticboy/vim-markdown'
"Plug 'rstacruz/vim-closer'
"Plug 'jiangmiao/auto-pairs'
"Plug 'psliwka/vim-smoothie'
"Plug 'wellle/targets.vim'
"Plug 'rhysd/clever-f.vim'
Plug 'sheerun/vim-polyglot'
"Plug 'lifepillar/vim-cheat40'
"Plug 'tpope/vim-unimpaired'
"Plug 'ludovicchabant/vim-gutentags'
Plug 'lervag/vimtex'
Plug 'skywind3000/asyncrun.vim'
Plug 'https://gitlab.com/HiPhish/info.vim.git' "info pages reader for vim
Plug 'francoiscabrol/ranger.vim'
Plug 'rbgrouleff/bclose.vim' " dependency of ranger
Plug 'metakirby5/codi.vim' " interactive scratchpad
Plug 'LucHermitte/lh-vim-lib' " needed for local_vimrc
Plug 'LucHermitte/local_vimrc'
let g:tex_flavor = 'latex'

" List ends here. Plugins become visible to Vim after this call.
call plug#end() "}}}

" define <mapleader>
let mapleader=","

" Plugin config {{{
lua require('neoscroll').setup()
" delete function calls
nnoremap <leader>dc dsnf
nnoremap <leader>dsc dsf
" python3
let g:python3_host_prog = '/home/mtoepperwien/.pyenv/versions/neovim3/bin/python'
let g:python_host_prog = '/home/mtoepperwien/.pyenv/versions/neovim2/bin/python'

" easy align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

" echodoc
set noshowmode
let g:echodoc_enable_at_startup = 1
" Theme
let g:gruvbox_material_better_performance = 1
colorscheme gruvbox-material
" lightline
let g:lightline = {
      \ 'colorscheme': 'gruvbox_material',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'relativepath', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }


" Deoplete
let g:deoplete#enable_at_startup=1
let g:deoplete#sources#clang#libclang_path = "/usr/lib/libclang.so"
let g:deoplete#sources#clang#clang_header = "/usr/lib/clang"

" vim-rainbow
let g:rainbow_active=1

" vim-markdown-preview
let vim_markdown_preview_github=1
let vim_markdown_preview_use_xdg_open=1

" vimtex
let g:vimtex_view_method = 'zathura'
let g:vimtex_view_general_viewer='zathura'
let g:vimtex_quickfix_autoclose_after_keystrokes=3
let g:vimtex_compiler_progname = 'nvr'
map <leader>lv :VimtexView<Enter>

" coc {{{
set nobackup
set nowritebackup
set updatetime=300
set shortmess+=c
set cmdheight=2
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <C-j>
      \ coc#pum#visible() ? coc#pum#next(1):
      \ <SID>check_back_space() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><C-k> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
inoremap <silent><expr> <c-space> coc#refresh()
inoremap <silent><expr> <Tab> coc#pum#visible() ? coc#pum#confirm() : "\<Tab>"
hi CocSearch ctermfg=12 guifg=#18A3FF
hi CocMenuSel ctermbg=109 guibg=#13354A
function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
    inoremap <silent><expr> <c-space> coc#refresh()
else
    inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
" inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
            \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
        execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
        call CocActionAsync('doHover')
    else
        execute '!' . &keywordprg . " " . expand('<cword>')
    endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>sg  <Plug>(coc-format-selected)
nmap <leader>sg  <Plug>(coc-format-selected)
nmap <leader>g <Plug>(coc-format)

augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder.
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
    nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
    inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
    inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
    vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
    vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
" }}}

" fzf shortcuts
map <Leader>sb :Buffers<Enter>
map <Leader>se :Files<Enter>
map <Leader>sl :BLines<Enter>
map <Leader>sL :Ag<Enter>

" Plugin config end }}}
"
" enable neovim-remote
let g:vimtex_compiler_progname = '/home/mtoepperwien/.local/bin/nvr'

" UI {{{
" hybrid line numbers
set number relativenumber

" jump to matching brackets when creating
set showmatch
set matchtime=1

" keep cursor towards middle
set scrolloff=10

" highlight search results
set hlsearch

" aylways show status line
set laststatus=2

" UI end }}}

" enable filetype detection
filetype plugin indent on
"" enable folding
set foldmethod=indent
" turn syntax highlighting on
syntax enable
" turn incremental search highlighting on 
set incsearch
" do a case insensitive search only if all chars are lower case
set ignorecase
set smartcase
" convert tabs to 2 spaces
set expandtab
set shiftwidth=2
set softtabstop=2
" not needed in nvim but kept for traditional vim compatibility
set nocompatible
" update stuff faster like gitgutter (in ms)
set updatetime=100
set hidden

" other foldmethod for vim-config files (e.g. vimrc)
autocmd filetype vim setlocal foldmethod=marker
au! BufNewFile,BufRead * if expand('%:t') !~ '\.' | set ft=noext | end
autocmd filetype noext setlocal foldmethod=marker

" dont auto indent in tex files (terrible indentation)
autocmd filetype tex setlocal foldmethod=marker

" compile markdown via pandoc to pdf
autocmd BufWritePost *.md silent AsyncRun pandoc -V geometry:margin=2cm <afile> -o <afile>:r.pdf

" Makefiles use real tabs
autocmd BufNewFile,BufRead Makefile set filetype=make
autocmd filetype make setlocal noexpandtab


" clear search highlights with 'Escape'
nnoremap <Esc> <Esc>:noh<cr><Esc>

"" custom keybinds
" echodoc completion
"inoremap <c-j> <c-x><c-o>
" map jj to leaving insert mode (and to also clear highlighting) 
inoremap kj <Esc>:noh<CR><Esc>
" move active window to new tab 
nnoremap <Leader>tab <C-w>T
" print '-' 75 times
nnoremap <Leader>- :call PrintSeparator(75)<CR>
" redo with U
nnoremap U <C-r>
" @author tag paste (javadoc)
nnoremap <Leader>@a a @author Jan Malte Töpperwien {@literal <}m.toepperwien@stud.uni-hannover.de{@literal >}<Esc>
" edit init.vim
nnoremap <Leader>~ :tab drop $MYVIMRC<CR>
" match closing bracket
inoremap {<Enter> {<Enter>}<Esc>O
" escape terminal with kj
tnoremap kj <C-\><C-n>


"" custom functions
" print '-' count times
function! PrintSeparator(count)
    let c=0
    while (c < a:count)
        call setline('.', getline('.') . '-')
        let c += 1
    endwhile
endfunction

" load init.vim/vimrc again whenever it is saved
if !exists('*ReloadVimrc')
    fun! ReloadVimrc()
        source $MYVIMRC
    endfun
endif
" autocmd! BufWritePost $MYVIMRC call ReloadVimrc() " right now not working properly

" check changes since last save with function
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffSaved call s:DiffWithSaved()

